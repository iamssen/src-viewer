<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" invoke="invokeHandler(event)"
					   showStatusBar="false">
	<fx:Script>
		<![CDATA[
			import ssen.airkit.update.AIRUpdate;
			import ssen.airkit.update.AIRUpdateState;
			import ssen.srcviewer.SrcViewerWindow;
			import ssen.srcviewer.model.SrcModel;
			
			private var _invokeArguments:Array;
			private var _initialized:Boolean;
			
			// 1. 어쨌든 실행하면 invoke 는 실행된다. 업데이트 실행을 확인하거나, argument 를 저장하는 역할을 한다
			private var update:AIRUpdate;
			
			private function invokeHandler(event:InvokeEvent):void {
				_invokeArguments=event.arguments;
				
				if (_initialized || Capabilities.isDebugger) {
					close();
					createWindow();
				} else {
					checkUpdate();
				}
				
				_initialized=true;
			}
			
			// 2. 업데이트 체크
			private function checkUpdate():void {
				// update check
				update=new AIRUpdate("https://github.com/iamssen/SrcViewer/raw/master/bin/update.xml");
				update.addEventListener(Event.INIT, updateInit);
				update.check();
			}
			
			// 3. Window 만들기
			private function createWindow(readArguments:Boolean=true):void {
				var srcmodel:SrcModel=new SrcModel;
				
				if (_invokeArguments.length === 0) {
					registerWindow(srcmodel);
				} else {
					srcmodel.readSrcViewFile(_invokeArguments[0], function(success:Boolean):void {
						if (success) {
							registerWindow(srcmodel);
						} else {
							// alert ??? 
						}
					});
				}
				
				_invokeArguments=null;
			}
			
			private function registerWindow(model:SrcModel):void {
				var screenBounds:Rectangle=Screen.mainScreen.bounds;
				
				var so:SharedObject=SharedObject.getLocal("srcwindow");
				var windowWidth:int=(so.data.windowWidth !== undefined) ? so.data.windowWidth : 1200;
				var windowHeight:int=(so.data.windowHeight !== undefined) ? so.data.windowHeight : 920;
				var windowX:int=(so.data.windowX !== undefined) ? so.data.windowX : (screenBounds.width / 2) - (windowWidth / 2);
				var windowY:int=(so.data.windowY !== undefined) ? so.data.windowY : (screenBounds.height / 2) - (windowHeight / 2);
				
				var maximize:Boolean=windowWidth + windowX > screenBounds.width || windowHeight + windowY > screenBounds.height;
				
				if (maximize) {
					windowWidth=1200;
					windowHeight=920;
					windowX=(screenBounds.width / 2) - (windowWidth / 2);
					windowY=(screenBounds.height / 2) - (windowHeight / 2);
				}
				
				var window:SrcViewerWindow;
				window=new SrcViewerWindow;
				window.srcmodel=model;
				window.newWindowCallback=openNewWindow;
				window.open();
				window.width=windowWidth;
				window.height=windowHeight;
				window.nativeWindow.x=windowX;
				window.nativeWindow.y=windowY;
				
				if (maximize) {
					window.nativeWindow.maximize();
				}
			}
			
			private function openNewWindow():void {
				registerWindow(new SrcModel);
			}
			
			private function updateInit(event:Event):void {
				if (update.state === AIRUpdateState.AVAILABLE) {
					update.update();
				} else {
					close();
					createWindow();
				}
			}
		]]>
	</fx:Script>

</s:WindowedApplication>
